local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local Camera = workspace.CurrentCamera
local Mouse = LocalPlayer:GetMouse()
local motional = getgenv().motional
local SilentAim = motional.SilentAim
local Camlock = motional.Camlock
local Backtrack = motional.Backtrack
local TriggerBot = motional.TriggerBot
local HitboxExpander = motional.HitboxExpander
local Movement = motional.Movement
local ESP = motional.ESP

-- Intro sequence
do
    local success, err = pcall(function()
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "MotionalIntroGui"
        screenGui.IgnoreGuiInset = true
        screenGui.ResetOnSpawn = false
        screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui", 5)

        local textLabel = Instance.new("TextLabel")
        textLabel.Name = "MotionalText"
        textLabel.Size = UDim2.new(0.5, 0, 0.2, 0)
        textLabel.Position = UDim2.new(0.25, 0, 0.4, 0)
        textLabel.BackgroundTransparency = 1
        textLabel.Text = "motional.dev"
        textLabel.TextColor3 = Color3.fromRGB(175, 134, 144) -- #AF8690
        textLabel.TextScaled = true
        textLabel.Font = Enum.Font.Nunito
        textLabel.TextTransparency = 0
        textLabel.Parent = screenGui

        task.wait(3)

        screenGui:Destroy()
    end)
    if not success then
        warn("[Intro] Failed to display intro: " .. tostring(err))
    end
end

local FOVCircle = Drawing.new("Circle")
FOVCircle.Color = SilentAim.FOV.OutlineColor
FOVCircle.Thickness = SilentAim.FOV.Thickness
FOVCircle.Transparency = SilentAim.FOV.Transparency
FOVCircle.Radius = SilentAim.FOV.Radius

local IsToggled = false
local Target
local Tween
local Info
local Cycle

local backtrackData = {}
local lastRecordTime = {}
local lastCleanup = tick()

local hitboxVisuals = {}

local WalkSpeedEnabled = false
local JumpPowerEnabled = false

-- ESP Setup
local espCache = {}
local newVector2, newColor3, newDrawing = Vector2.new, Color3.new, Drawing.new
local tan, rad = math.tan, math.rad
local round = function(...) local a = {} for i, v in next, table.pack(...) do a[i] = math.round(v) end return unpack(a) end
local wtvp = function(...) local a, b = Camera.WorldToViewportPoint(Camera, ...) return newVector2(a.X, a.Y), b, a.Z end

local function createEsp(player)
    local drawings = {}
    if ESP.Mode == "2D" then
        drawings.box = newDrawing("Square")
        drawings.box.Thickness = 1
        drawings.box.Filled = false
        drawings.box.Color = Color3.fromRGB(255, 255, 255)
        drawings.box.Visible = false
        drawings.box.ZIndex = 2

        drawings.boxoutline = newDrawing("Square")
        drawings.boxoutline.Thickness = 3
        drawings.boxoutline.Filled = false
        drawings.boxoutline.Color = newColor3()
        drawings.boxoutline.Visible = false
        drawings.boxoutline.ZIndex = 1
    elseif ESP.Mode == "3D" then
        drawings.lines = {}
        for i = 1, 12 do
            drawings.lines[i] = newDrawing("Line")
            drawings.lines[i].Thickness = 1
            drawings.lines[i].Color = Color3.fromRGB(255, 255, 255)
            drawings.lines[i].Visible = false
            drawings.lines[i].ZIndex = 2
        end

        drawings.outlines = {}
        for i = 1, 12 do
            drawings.outlines[i] = newDrawing("Line")
            drawings.outlines[i].Thickness = 3
            drawings.outlines[i].Color = newColor3()
            drawings.outlines[i].Visible = false
            drawings.outlines[i].ZIndex = 1
        end
    end
    espCache[player] = drawings
end

local function removeEsp(player)
    if rawget(espCache, player) then
        local drawings = espCache[player]
        if ESP.Mode == "2D" then
            drawings.box:Remove()
            drawings.boxoutline:Remove()
        elseif ESP.Mode == "3D" then
            for _, line in next, drawings.lines do
                line:Remove()
            end
            for _, outline in next, drawings.outlines do
                outline:Remove()
            end
        end
        espCache[player] = nil
    end
end

local function updateEsp(player, esp)
    local character = player and player.Character
    if not character then
        if ESP.Mode == "2D" then
            esp.box.Visible = false
            esp.boxoutline.Visible = false
        elseif ESP.Mode == "3D" then
            for _, line in ipairs(esp.lines) do
                line.Visible = false
            end
            for _, outline in ipairs(esp.outlines) do
                outline.Visible = false
            end
        end
        return
    end

    if ESP.Mode == "2D" then
        local cframe = character:GetModelCFrame()
        local position, visible, depth = wtvp(cframe.Position)
        esp.box.Visible = visible and ESP.Enabled
        esp.boxoutline.Visible = visible and ESP.Enabled

        if cframe and visible then
            local scaleFactor = 1 / (depth * tan(rad(Camera.FieldOfView / 2)) * 2) * 1000
            local width, height = round(4 * scaleFactor, 5 * scaleFactor)
            local x, y = round(position.X, position.Y)

            esp.box.Size = newVector2(width, height)
            esp.box.Position = newVector2(round(x - width / 2, y - height / 2))

            esp.boxoutline.Size = esp.box.Size
            esp.boxoutline.Position = esp.box.Position
        end
    elseif ESP.Mode == "3D" then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local position = rootPart.Position
            local visible = false

            -- Define the 8 corners of the 3D box with default size (4, 5, 2)
            local corners = {
                position + Vector3.new(-2, 2.5, -1),
                position + Vector3.new(2, 2.5, -1),
                position + Vector3.new(2, -2.5, -1),
                position + Vector3.new(-2, -2.5, -1),
                position + Vector3.new(-2, 2.5, 1),
                position + Vector3.new(2, 2.5, 1),
                position + Vector3.new(2, -2.5, 1),
                position + Vector3.new(-2, -2.5, 1)
            }

            -- Project corners to screen space
            local screenCorners = {}
            local anyVisible = false
            for i, corner in ipairs(corners) do
                local screenPos, onScreen = wtvp(corner)
                screenCorners[i] = { pos = screenPos, onScreen = onScreen }
                if onScreen then
                    anyVisible = true
                end
            end

            -- Define edges of the box (12 edges)
            local edges = {
                {1, 2}, {2, 3}, {3, 4}, {4, 1},
                {5, 6}, {6, 7}, {7, 8}, {8, 5},
                {1, 5}, {2, 6}, {3, 7}, {4, 8}
            }

            -- Update lines
            for i, edge in ipairs(edges) do
                local startCorner = screenCorners[edge[1]]
                local endCorner = screenCorners[edge[2]]
                local line = esp.lines[i]
                local outline = esp.outlines[i]

                if startCorner.onScreen and endCorner.onScreen and ESP.Enabled then
                    line.Visible = anyVisible
                    outline.Visible = anyVisible
                    line.From = startCorner.pos
                    line.To = endCorner.pos
                    outline.From = startCorner.pos
                    outline.To = endCorner.pos
                else
                    line.Visible = false
                    outline.Visible = false
                end
            end
        else
            for _, line in ipairs(esp.lines) do
                line.Visible = false
            end
            for _, outline in ipairs(esp.outlines) do
                outline.Visible = false
            end
        end
    end
end

local function IsHoldingKnife()
    if not (SilentAim.KnifeCheck or Camlock.KnifeCheck) then
        return false
    end
    local Character = LocalPlayer.Character
    if Character then
        local Tool = Character:FindFirstChildOfClass("Tool")
        return Tool and Tool.Name == "Knife"
    end
    return false
end

local function GetClosestPart(Character, MousePosition)
    local ClosestDistance, ClosestPart = math.huge, nil
    local Parts = {"Head", "HumanoidRootPart", "Torso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"}
    for _, PartName in ipairs(Parts) do
        local Part = Character:FindFirstChild(PartName)
        if Part then
            local ScreenPosition, Visible = Camera:WorldToScreenPoint(Part.Position)
            if Visible then
                local Distance = (MousePosition - Vector2.new(ScreenPosition.X, ScreenPosition.Y)).Magnitude
                if Distance < ClosestDistance then
                    ClosestDistance, ClosestPart = Distance, Part
                end
            end
        end
    end
    return ClosestPart
end

local function GetClosestPlayer()
    local ClosestDistance, ClosestPart = nil, nil
    local MousePosition = UserInputService:GetMouseLocation()
    for _, Player in next, Players:GetPlayers() do
        if Player ~= LocalPlayer and Player.Character then
            local Character = Player.Character
            local Humanoid = Character:FindFirstChild("Humanoid")
            if Humanoid and (not SilentAim.HealthCheck or Humanoid.Health > 0) then
                local TargetPart
                if SilentAim.HitPartMode == "Closest" then
                    TargetPart = GetClosestPart(Character, MousePosition)
                else
                    TargetPart = Character:FindFirstChild(SilentAim.HitPart)
                end
                if TargetPart then
                    local ScreenPosition, Visible = Camera:WorldToScreenPoint(TargetPart.Position)
                    if Visible then
                        local Distance = (MousePosition - Vector2.new(ScreenPosition.X, ScreenPosition.Y)).Magnitude
                        if Distance <= SilentAim.FOV.Radius and (not ClosestDistance or Distance < ClosestDistance) then
                            ClosestDistance, ClosestPart = Distance, TargetPart
                        end
                    end
                end
            end
        end
    end
    return ClosestPart
end

local function ApplyPrediction(TargetPart, PredictionSettings)
    if not PredictionSettings.Enabled then
        return TargetPart.Position
    end
    local Velocity = TargetPart.Velocity
    local PredictedPosition = TargetPart.Position + Vector3.new(
        Velocity.X * PredictionSettings.X,
        Velocity.Y * PredictionSettings.Y,
        Velocity.Z * PredictionSettings.X
    )
    return PredictedPosition
end

local function CheckHitChance()
    return math.random(1, 100) <= SilentAim.HitChance
end

local function GetCamlockTarget()
    local ClosestPlayer, ClosestDistance = nil, math.huge
    for _, Plr in pairs(Players:GetPlayers()) do
        if Plr ~= LocalPlayer then
            if Plr.Character and Plr.Character:FindFirstChild(Camlock.HitPart) and (Plr.Character:FindFirstChild("HumanoidRootPart") or Plr.Character:FindFirstChild("Torso")) then
                if not Camlock.HealthCheck or (Plr.Character:FindFirstChildOfClass("Humanoid") and Plr.Character:FindFirstChildOfClass("Humanoid").Health > 0) then
                    local ScreenPos, Visible = Camera:WorldToScreenPoint(Plr.Character[Camlock.HitPart].Position)
                    if Visible then
                        local MousePos = Vector2.new(Mouse.X, Mouse.Y)
                        ScreenPos = Vector2.new(ScreenPos.X, ScreenPos.Y)
                        local Difference = (ScreenPos - MousePos).Magnitude
                        if Difference < ClosestDistance then
                            ClosestDistance = Difference
                            ClosestPlayer = Plr
                        end
                    end
                end
            end
        end
    end
    Target = ClosestPlayer
end

local function CamlockMain()
    if Camlock.KnifeCheck and IsHoldingKnife() then
        if Tween then Tween:Cancel() end
        if Cycle then Cycle:Disconnect() end
        return
    end
    GetCamlockTarget()
    Cycle = RunService.RenderStepped:Connect(function()
        if Camlock.KnifeCheck and IsHoldingKnife() then
            if Tween then Tween:Cancel() end
            Cycle:Disconnect()
            return
        end
        if Target and Target.Character and Target.Character:FindFirstChild(Camlock.HitPart) and (Target.Character:FindFirstChild("HumanoidRootPart") or Target.Character:FindFirstChild("Torso")) then
            if not Camlock.HealthCheck or (Target.Character:FindFirstChildOfClass("Humanoid") and Target.Character:FindFirstChildOfClass("Humanoid").Health > 0) then
                Info = TweenInfo.new(Camlock.Time, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, false, 0)
                local velocityPart = Target.Character:FindFirstChild("HumanoidRootPart") or Target.Character:FindFirstChild("Torso")
                local targetPosition = Camlock.Prediction.Enabled and ApplyPrediction(Target.Character[Camlock.HitPart], Camlock.Prediction) or Target.Character[Camlock.HitPart].Position
                local LookAt = CFrame.lookAt(Camera.CFrame.Position, targetPosition)
                Tween = TweenService:Create(Camera, Info, {CFrame = LookAt})
                Tween:Play()
            else
                Cycle:Disconnect()
            end
        else
            Cycle:Disconnect()
        end
    end)
end

local function getBacktrackPosition(player)
    local data = backtrackData[player]
    if not Backtrack.Enabled or not data then return nil end

    local currentTime = tick()
    for i = 1, #data do
        local record = data[i]
        if currentTime - record.time <= Backtrack.MaxTime then
            if Backtrack.Prediction.Enabled then
                local timeDelta = currentTime - record.time
                return record.position + Vector3.new(
                    record.velocity.X * Backtrack.Prediction.X * timeDelta,
                    record.velocity.Y * Backtrack.Prediction.Y * timeDelta,
                    record.velocity.Z * Backtrack.Prediction.X * timeDelta
                )
            end
            return record.position
        end
    end
    return nil
end

local function recordPlayerPosition(player)
    if not Backtrack.Enabled then return end
    local char = player.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then return end

    local currentTime = tick()
    if lastRecordTime[player] and (currentTime - lastRecordTime[player] < Backtrack.RecordInterval) then
        return
    end
    lastRecordTime[player] = currentTime

    local rootPart = char.HumanoidRootPart
    local data = backtrackData[player]
    if not data then
        backtrackData[player] = {}
        data = backtrackData[player]
    end

    local lastRecord = data[1]
    local velocity = Vector3.zero
    if lastRecord then
        local dt = currentTime - lastRecord.time
        if dt > 0 then
            velocity = (rootPart.Position - lastRecord.position) / dt
        end
    end

    table.insert(data, 1, {
        position = rootPart.Position,
        velocity = velocity,
        time = currentTime
    })

    if #data > Backtrack.MaxRecords then
        table.remove(data)
    end
end

local function cleanupData()
    if not Backtrack.Enabled then
        backtrackData = {}
        lastRecordTime = {}
        return
    end
    for player, data in pairs(backtrackData) do
        if not player.Parent or not player.Character or not data then
            backtrackData[player] = nil
            lastRecordTime[player] = nil
        elseif #data > 0 and tick() - data[1].time > Backtrack.MaxTime * 2 then
            backtrackData[player] = nil
            lastRecordTime[player] = nil
        end
    end
end

local function GetMagnitudeFromMouse(targetPart)
    local targetScreenPos, onScreen = Camera:WorldToViewportPoint(targetPart.Position)
    if onScreen then
        local mousePos = UserInputService:GetMouseLocation()
        return (Vector2.new(targetScreenPos.X, targetScreenPos.Y) - mousePos).Magnitude
    end
    return math.huge
end

local function IsInFOV(targetPart)
    local direction = (targetPart.Position - Camera.CFrame.Position).Unit
    local cameraDirection = Camera.CFrame.LookVector
    return math.deg(math.acos(direction:Dot(cameraDirection))) <= TriggerBot.FOV
end

local function Click()
    mouse1press()
    wait()
    mouse1release()
end

local function ClearHitboxVisual(player)
    if hitboxVisuals[player] then
        hitboxVisuals[player]:Destroy()
        hitboxVisuals[player] = nil
    end
end

local function UpdateHitboxExpander()
    if not HitboxExpander.Enabled then
        for player, _ in pairs(hitboxVisuals) do
            ClearHitboxVisual(player)
        end
        return
    end

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            local rootPart = humanoid and humanoid.RootPart
            if rootPart then
                rootPart.CanCollide = false
                rootPart.Size = Vector3.new(HitboxExpander.Size, HitboxExpander.Size, HitboxExpander.Size)

                if HitboxExpander.Visualize then
                    if not hitboxVisuals[player] then
                        local visual = Instance.new("Part")
                        visual.Name = player.Name .. "_HitboxVisual"
                        visual.Anchored = true
                        visual.CanCollide = false
                        visual.Material = Enum.Material.ForceField
                        visual.Color = HitboxExpander.VisualizeFillColor
                        visual.Transparency = HitboxExpander.VisualizeTransparency
                        local outline = Instance.new("SelectionBox")
                        outline.Adornee = visual
                        outline.LineThickness = 0.01
                        outline.SurfaceColor3 = HitboxExpander.VisualizeOutlineColor
                        outline.SurfaceTransparency = HitboxExpander.VisualizeTransparency
                        outline.Parent = visual
                        visual.Parent = workspace
                        hitboxVisuals[player] = visual
                    end
                    hitboxVisuals[player].Size = rootPart.Size
                    hitboxVisuals[player].CFrame = rootPart.CFrame
                else
                    ClearHitboxVisual(player)
                end
            else
                ClearHitboxVisual(player)
            end
        end
    end
end

local function ToggleWalkSpeed()
    if not Movement.WalkSpeed.Enabled then return end
    WalkSpeedEnabled = not WalkSpeedEnabled
    local speed = WalkSpeedEnabled and Movement.WalkSpeed.FastSpeed or Movement.WalkSpeed.NormalSpeed
    local Humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if Humanoid then
        _G.WS = speed
        Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            Humanoid.WalkSpeed = _G.WS
        end)
        Humanoid.WalkSpeed = _G.WS
    end
end

local function ToggleJumpPower()
    if not Movement.JumpPower.Enabled then return end
    JumpPowerEnabled = not JumpPowerEnabled
    local power = JumpPowerEnabled and Movement.JumpPower.FastPower or Movement.JumpPower.NormalPower
    local Humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
    if Humanoid then
        _G.JP = power
        Humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
            Humanoid.JumpPower = _G.JP
        end)
        Humanoid.JumpPower = _G.JP
    end
end

local success, grm = pcall(getrawmetatable, game)

if success and grm and grm.__index and setreadonly then
    local index = grm.__index
    setreadonly(grm, false)

    grm.__index = function(self, k)
        if not checkcaller() and self == LocalPlayer:GetMouse() and SilentAim.Enabled and not IsHoldingKnife() then
            if (k == "Hit" or k == "Target") and CheckHitChance() then
                local TargetPart = GetClosestPlayer()
                if TargetPart then
                    local Position = SilentAim.Prediction.Enabled and ApplyPrediction(TargetPart, SilentAim.Prediction) or TargetPart.Position
                    return CFrame.new(Position)
                end
            end
        end
        return index(self, k)
    end
else
    warn("[Silent Aim] Metatable hooking not supported on this executor. Silent Aim disabled.")
end

RunService.RenderStepped:Connect(function()
    if SilentAim.Enabled then
        FOVCircle.Visible = SilentAim.FOV.Visible
        FOVCircle.Position = UserInputService:GetMouseLocation()
        FOVCircle.Radius = SilentAim.FOV.Radius
        FOVCircle.Color = SilentAim.FOV.OutlineColor
        FOVCircle.Transparency = SilentAim.FOV.Transparency
    else
        FOVCircle.Visible = false
    end
end)

RunService.Heartbeat:Connect(function()
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then
            recordPlayerPosition(player)
        end
    end

    if tick() - lastCleanup >= 15 then
        cleanupData()
        lastCleanup = tick()
    end
end)

RunService.RenderStepped:Connect(function()
    if not TriggerBot.Enabled then return end

    local closestTarget = nil
    local closestDistance = math.huge

    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            local head = player.Character:FindFirstChild("Head")
            if head then
                local distanceFromCamera = (head.Position - Camera.CFrame.Position).Magnitude
                if distanceFromCamera <= TriggerBot.Distance then
                    local predictedPos = TriggerBot.Prediction.Enabled and ApplyPrediction(head, TriggerBot.Prediction) or head.Position
                    local screenPos, onScreen = Camera:WorldToViewportPoint(predictedPos)
                    if onScreen then
                        local screenMagnitude = (Vector2.new(screenPos.X, screenPos.Y) - UserInputService:GetMouseLocation()).Magnitude
                        if screenMagnitude < TriggerBot.Radius and IsInFOV(head) and screenMagnitude < closestDistance then
                            closestDistance = screenMagnitude
                            closestTarget = head
                        end
                    end
                end
            end
        end
    end

    if closestTarget then
        if TriggerBot.Delay == 0 then
            Click()
        else
            wait(TriggerBot.Delay / 1000)
            Click()
        end
    end
end)

-- Updated HitboxExpander update loop to prevent thread stacking
task.spawn(function()
    while true do
        UpdateHitboxExpander()
        task.wait(HitboxExpander.RefreshTime)
    end
end)

RunService:BindToRenderStep("esp", Enum.RenderPriority.Camera.Value, function()
    if not ESP.Enabled then
        for player, drawings in next, espCache do
            if ESP.Mode == "2D" then
                drawings.box.Visible = false
                drawings.boxoutline.Visible = false
            elseif ESP.Mode == "3D" then
                for _, line in ipairs(drawings.lines) do
                    line.Visible = false
                end
                for _, outline in ipairs(drawings.outlines) do
                    outline.Visible = false
                end
            end
        end
        return
    end

    for player, drawings in next, espCache do
        if ESP.TeamCheck and player.Team == LocalPlayer.Team then
            continue
        end

        if drawings and player ~= LocalPlayer then
            updateEsp(player, drawings)
        end
    end
end)

for _, player in next, Players:GetPlayers() do
    if player ~= LocalPlayer then
        createEsp(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    createEsp(player)
end)

Players.PlayerRemoving:Connect(function(player)
    removeEsp(player)
end)

UserInputService.InputBegan:Connect(function(Key, E)
    if E then return end
    if Camlock.Enabled and Key.KeyCode == Enum.KeyCode[Camlock.Bind:upper()] then
        if not IsToggled then
            CamlockMain()
            IsToggled = true
        elseif IsToggled then
            if Tween then Tween:Cancel() end
            if Cycle then Cycle:Disconnect() end
            IsToggled = false
        end
    elseif TriggerBot.Enabled and Key.KeyCode == Enum.KeyCode[TriggerBot.ToggleKey] then
        TriggerBot.Enabled = not TriggerBot.Enabled
    elseif Movement.WalkSpeed.Enabled and Key.KeyCode == Enum.KeyCode[Movement.WalkSpeed.ToggleKey] then
        ToggleWalkSpeed()
    elseif Movement.JumpPower.Enabled and Key.KeyCode == Enum.KeyCode[Movement.JumpPower.ToggleKey] then
        ToggleJumpPower()
    end
end)

motional.backtrackAPI = {
    getBacktrackPosition = getBacktrackPosition
}
